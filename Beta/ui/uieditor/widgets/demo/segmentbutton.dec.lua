require( "ui.uieditor.widgets.CAC.cac_ButtonBoxLrgInactiveDiags" )
require( "ui.uieditor.widgets.StartMenu.StartMenu_frame_noBG" )
require( "ui.uieditor.widgets.Lobby.Common.FE_FocusBarContainer" )

CoD.SegmentButton = InheritFrom( LUI.UIElement )
CoD.SegmentButton.new = function ( menu, controller )
	local self = LUI.UIElement.new()
	if PreLoadFunc then
		PreLoadFunc( self, controller )
	end
	self:setUseStencil( false )
	self:setClass( CoD.SegmentButton )
	self.id = "SegmentButton"
	self.soundSet = "ChooseDecal"
	self:setLeftRight( true, false, 0, 140 )
	self:setTopBottom( true, false, 0, 100 )
	self:makeFocusable()
	self:setHandleMouse( true )
	self.anyChildUsesUpdateState = true
	
	local bg = LUI.UIImage.new()
	bg:setLeftRight( true, true, 2, -2 )
	bg:setTopBottom( true, true, 2, -2 )
	bg:setRGB( ColorSet.Orange.r, ColorSet.Orange.g, ColorSet.Orange.b )
	bg:setAlpha( 0 )
	self:addElement( bg )
	self.bg = bg
	
	local BoxButtonLrgInactiveDiag = CoD.cac_ButtonBoxLrgInactiveDiags.new( menu, controller )
	BoxButtonLrgInactiveDiag:setLeftRight( true, true, 0, -1 )
	BoxButtonLrgInactiveDiag:setTopBottom( true, true, 0, -1 )
	BoxButtonLrgInactiveDiag:setRGB( ColorSet.Disabled.r, ColorSet.Disabled.g, ColorSet.Disabled.b )
	self:addElement( BoxButtonLrgInactiveDiag )
	self.BoxButtonLrgInactiveDiag = BoxButtonLrgInactiveDiag
	
	local ImageContainer = LUI.UIImage.new()
	ImageContainer:setLeftRight( true, true, 2, -1 )
	ImageContainer:setTopBottom( true, true, 1, -2.5 )
	ImageContainer:setRGB( ColorSet.Disabled.r, ColorSet.Disabled.g, ColorSet.Disabled.b )
	ImageContainer:setAlpha( 0 )
	self:addElement( ImageContainer )
	self.ImageContainer = ImageContainer
	
	local StartMenuframenoBG0 = CoD.StartMenu_frame_noBG.new( menu, controller )
	StartMenuframenoBG0:setLeftRight( true, true, 0, 0 )
	StartMenuframenoBG0:setTopBottom( true, true, 0, -1 )
	StartMenuframenoBG0:setRGB( ColorSet.Orange.r, ColorSet.Orange.g, ColorSet.Orange.b )
	self:addElement( StartMenuframenoBG0 )
	self.StartMenuframenoBG0 = StartMenuframenoBG0
	
	local ImageTextBg = LUI.UIImage.new()
	ImageTextBg:setLeftRight( true, false, 2, 26 )
	ImageTextBg:setTopBottom( true, false, 2, 26 )
	ImageTextBg:setRGB( 0.32, 0.32, 0.32 )
	self:addElement( ImageTextBg )
	self.ImageTextBg = ImageTextBg
	
	local ImageText = LUI.UIText.new()
	ImageText:setLeftRight( true, true, 2, -114 )
	ImageText:setTopBottom( true, false, 3, 25 )
	ImageText:setTTF( "fonts/default.ttf" )
	ImageText:setAlignment( Enum.LUIAlignment.LUI_ALIGNMENT_CENTER )
	ImageText:setAlignment( Enum.LUIAlignment.LUI_ALIGNMENT_TOP )
	self:addElement( ImageText )
	self.ImageText = ImageText
	
	local FocusBarT = CoD.FE_FocusBarContainer.new( menu, controller )
	FocusBarT:setLeftRight( true, true, 0, 0 )
	FocusBarT:setTopBottom( true, false, -1, 3 )
	FocusBarT:setRGB( ColorSet.Orange.r, ColorSet.Orange.g, ColorSet.Orange.b )
	FocusBarT:setAlpha( 0 )
	FocusBarT:setZoom( 1 )
	self:addElement( FocusBarT )
	self.FocusBarT = FocusBarT
	
	local FocusBarB = CoD.FE_FocusBarContainer.new( menu, controller )
	FocusBarB:setLeftRight( true, true, 0, 0 )
	FocusBarB:setTopBottom( false, true, -3, 1 )
	FocusBarB:setRGB( ColorSet.Orange.r, ColorSet.Orange.g, ColorSet.Orange.b )
	FocusBarB:setAlpha( 0 )
	FocusBarB:setZoom( 1 )
	self:addElement( FocusBarB )
	self.FocusBarB = FocusBarB
	
	self.bg:linkToElementModel( self, "img", true, function ( model )
		local modelValue = Engine.GetModelValue( model )
		if modelValue then
			bg:setImage( RegisterImage( modelValue ) )
		end
	end )
	self.ImageText:linkToElementModel( self, "segmentNumber", true, function ( model )
		local modelValue = Engine.GetModelValue( model )
		if modelValue then
			ImageText:setText( Engine.Localize( modelValue ) )
		end
	end )
	self.clipsPerState = {
		DefaultState = {
			DefaultClip = function ()
				self:setupElementClipCounter( 7 )
				bg:completeAnimation()
				self.bg:setRGB( ColorSet.WaypointNeutral.r, ColorSet.WaypointNeutral.g, ColorSet.WaypointNeutral.b )
				self.bg:setAlpha( 0.4 )
				self.clipFinished( bg, {} )
				BoxButtonLrgInactiveDiag:completeAnimation()
				self.BoxButtonLrgInactiveDiag:setRGB( 1, 1, 1 )
				self.BoxButtonLrgInactiveDiag:setAlpha( 0 )
				self.clipFinished( BoxButtonLrgInactiveDiag, {} )
				ImageContainer:completeAnimation()
				self.ImageContainer:setRGB( 1, 1, 1 )
				self.ImageContainer:setAlpha( 0 )
				self.clipFinished( ImageContainer, {} )
				StartMenuframenoBG0:completeAnimation()
				self.StartMenuframenoBG0:setRGB( 1, 1, 1 )
				self.StartMenuframenoBG0:setAlpha( 1 )
				self.clipFinished( StartMenuframenoBG0, {} )
				ImageText:completeAnimation()
				self.ImageText:setRGB( ColorSet.WaypointNeutral.r, ColorSet.WaypointNeutral.g, ColorSet.WaypointNeutral.b )
				self.ImageText:setAlpha( 1 )
				self.clipFinished( ImageText, {} )
				FocusBarT:completeAnimation()
				self.FocusBarT:setAlpha( 0 )
				self.clipFinished( FocusBarT, {} )
				FocusBarB:completeAnimation()
				self.FocusBarB:setAlpha( 0 )
				self.clipFinished( FocusBarB, {} )
			end,
			Focus = function ()
				self:setupElementClipCounter( 7 )
				bg:completeAnimation()
				self.bg:setRGB( ColorSet.WaypointNeutral.r, ColorSet.WaypointNeutral.g, ColorSet.WaypointNeutral.b )
				self.bg:setAlpha( 1 )
				self.clipFinished( bg, {} )
				BoxButtonLrgInactiveDiag:completeAnimation()
				self.BoxButtonLrgInactiveDiag:setRGB( 1, 1, 1 )
				self.clipFinished( BoxButtonLrgInactiveDiag, {} )
				ImageContainer:completeAnimation()
				self.ImageContainer:setRGB( 1, 1, 1 )
				self.ImageContainer:setAlpha( 0 )
				self.clipFinished( ImageContainer, {} )
				StartMenuframenoBG0:completeAnimation()
				self.StartMenuframenoBG0:setRGB( 1, 1, 1 )
				self.clipFinished( StartMenuframenoBG0, {} )
				ImageText:completeAnimation()
				self.ImageText:setRGB( ColorSet.Orange.r, ColorSet.Orange.g, ColorSet.Orange.b )
				self.clipFinished( ImageText, {} )
				FocusBarT:completeAnimation()
				self.FocusBarT:setAlpha( 1 )
				self.clipFinished( FocusBarT, {} )
				FocusBarB:completeAnimation()
				self.FocusBarB:setAlpha( 1 )
				self.clipFinished( FocusBarB, {} )
			end
		},
		EmptyState = {
			DefaultClip = function ()
				self:setupElementClipCounter( 8 )
				bg:completeAnimation()
				self.bg:setRGB( ColorSet.WaypointNeutral.r, ColorSet.WaypointNeutral.g, ColorSet.WaypointNeutral.b )
				self.bg:setAlpha( 0 )
				self.clipFinished( bg, {} )
				BoxButtonLrgInactiveDiag:completeAnimation()
				self.BoxButtonLrgInactiveDiag:setRGB( 1, 1, 1 )
				self.BoxButtonLrgInactiveDiag:setAlpha( 0 )
				self.clipFinished( BoxButtonLrgInactiveDiag, {} )
				ImageContainer:completeAnimation()
				self.ImageContainer:setRGB( 1, 1, 1 )
				self.ImageContainer:setAlpha( 0 )
				self.clipFinished( ImageContainer, {} )
				StartMenuframenoBG0:completeAnimation()
				self.StartMenuframenoBG0:setRGB( 1, 1, 1 )
				self.StartMenuframenoBG0:setAlpha( 1 )
				self.clipFinished( StartMenuframenoBG0, {} )
				ImageTextBg:completeAnimation()
				self.ImageTextBg:setAlpha( 0 )
				self.clipFinished( ImageTextBg, {} )
				ImageText:completeAnimation()
				self.ImageText:setRGB( ColorSet.Disabled.r, ColorSet.Disabled.g, ColorSet.Disabled.b )
				self.ImageText:setAlpha( 1 )
				self.clipFinished( ImageText, {} )
				FocusBarT:completeAnimation()
				self.FocusBarT:setAlpha( 0 )
				self.clipFinished( FocusBarT, {} )
				FocusBarB:completeAnimation()
				self.FocusBarB:setAlpha( 0 )
				self.clipFinished( FocusBarB, {} )
			end,
			Focus = function ()
				self:setupElementClipCounter( 8 )
				bg:completeAnimation()
				self.bg:setRGB( ColorSet.WaypointNeutral.r, ColorSet.WaypointNeutral.g, ColorSet.WaypointNeutral.b )
				self.bg:setAlpha( 0 )
				self.clipFinished( bg, {} )
				BoxButtonLrgInactiveDiag:completeAnimation()
				self.BoxButtonLrgInactiveDiag:setRGB( 1, 1, 1 )
				self.clipFinished( BoxButtonLrgInactiveDiag, {} )
				ImageContainer:completeAnimation()
				self.ImageContainer:setRGB( 1, 1, 1 )
				self.ImageContainer:setAlpha( 0 )
				self.clipFinished( ImageContainer, {} )
				StartMenuframenoBG0:completeAnimation()
				self.StartMenuframenoBG0:setRGB( 1, 1, 1 )
				self.clipFinished( StartMenuframenoBG0, {} )
				ImageTextBg:completeAnimation()
				self.ImageTextBg:setAlpha( 0 )
				self.clipFinished( ImageTextBg, {} )
				ImageText:completeAnimation()
				self.ImageText:setRGB( ColorSet.Orange.r, ColorSet.Orange.g, ColorSet.Orange.b )
				self.clipFinished( ImageText, {} )
				FocusBarT:completeAnimation()
				self.FocusBarT:setAlpha( 1 )
				self.clipFinished( FocusBarT, {} )
				FocusBarB:completeAnimation()
				self.FocusBarB:setAlpha( 1 )
				self.clipFinished( FocusBarB, {} )
			end
		},
		SelectedState = {
			DefaultClip = function ()
				self:setupElementClipCounter( 8 )
				bg:completeAnimation()
				self.bg:setRGB( ColorSet.Orange.r, ColorSet.Orange.g, ColorSet.Orange.b )
				self.bg:setAlpha( 0.4 )
				self.clipFinished( bg, {} )
				BoxButtonLrgInactiveDiag:completeAnimation()
				self.BoxButtonLrgInactiveDiag:setRGB( 1, 1, 1 )
				self.BoxButtonLrgInactiveDiag:setAlpha( 0 )
				self.clipFinished( BoxButtonLrgInactiveDiag, {} )
				ImageContainer:completeAnimation()
				self.ImageContainer:setRGB( 1, 1, 1 )
				self.ImageContainer:setAlpha( 0 )
				self.clipFinished( ImageContainer, {} )
				StartMenuframenoBG0:completeAnimation()
				self.StartMenuframenoBG0:setRGB( ColorSet.Orange.r, ColorSet.Orange.g, ColorSet.Orange.b )
				self.StartMenuframenoBG0:setAlpha( 1 )
				self.clipFinished( StartMenuframenoBG0, {} )
				ImageTextBg:completeAnimation()
				self.ImageTextBg:setAlpha( 1 )
				self.clipFinished( ImageTextBg, {} )
				ImageText:completeAnimation()
				self.ImageText:setRGB( ColorSet.WaypointNeutral.r, ColorSet.WaypointNeutral.g, ColorSet.WaypointNeutral.b )
				self.ImageText:setAlpha( 1 )
				self.clipFinished( ImageText, {} )
				FocusBarT:completeAnimation()
				self.FocusBarT:setRGB( ColorSet.Orange.r, ColorSet.Orange.g, ColorSet.Orange.b )
				self.FocusBarT:setAlpha( 0 )
				self.clipFinished( FocusBarT, {} )
				FocusBarB:completeAnimation()
				self.FocusBarB:setRGB( ColorSet.Orange.r, ColorSet.Orange.g, ColorSet.Orange.b )
				self.FocusBarB:setAlpha( 0 )
				self.clipFinished( FocusBarB, {} )
			end,
			Focus = function ()
				self:setupElementClipCounter( 8 )
				bg:completeAnimation()
				self.bg:setRGB( ColorSet.Orange.r, ColorSet.Orange.g, ColorSet.Orange.b )
				self.bg:setAlpha( 0.4 )
				self.clipFinished( bg, {} )
				BoxButtonLrgInactiveDiag:completeAnimation()
				self.BoxButtonLrgInactiveDiag:setRGB( 1, 1, 1 )
				self.clipFinished( BoxButtonLrgInactiveDiag, {} )
				ImageContainer:completeAnimation()
				self.ImageContainer:setRGB( 1, 1, 1 )
				self.ImageContainer:setAlpha( 0 )
				self.clipFinished( ImageContainer, {} )
				StartMenuframenoBG0:completeAnimation()
				self.StartMenuframenoBG0:setRGB( ColorSet.Orange.r, ColorSet.Orange.g, ColorSet.Orange.b )
				self.clipFinished( StartMenuframenoBG0, {} )
				ImageTextBg:completeAnimation()
				self.ImageTextBg:setAlpha( 1 )
				self.clipFinished( ImageTextBg, {} )
				ImageText:completeAnimation()
				self.ImageText:setRGB( ColorSet.WaypointNeutral.r, ColorSet.WaypointNeutral.g, ColorSet.WaypointNeutral.b )
				self.ImageText:setAlpha( 1 )
				self.clipFinished( ImageText, {} )
				FocusBarT:completeAnimation()
				self.FocusBarT:setAlpha( 0 )
				self.clipFinished( FocusBarT, {} )
				FocusBarB:completeAnimation()
				self.FocusBarB:setAlpha( 0 )
				self.clipFinished( FocusBarB, {} )
			end
		}
	}
	self:mergeStateConditions( {
		{
			stateName = "EmptyState",
			condition = function ( menu, element, event )
				return IsDisabled( element, controller )
			end
		},
		{
			stateName = "SelectedState",
			condition = function ( menu, element, event )
				return IsSegmentInSelectedState( element, controller )
			end
		}
	} )
	self:linkToElementModel( "disabled", true, function ( model )
		menu:updateElementState( self, {
			name = "model_validation",
			menu = menu,
			modelValue = Engine.GetModelValue( model ),
			modelName = "disabled"
		} )
	end )
	LUI.OverrideFunction_CallOriginalSecond( self, "close", function ( self )
		self.BoxButtonLrgInactiveDiag:close()
		self.StartMenuframenoBG0:close()
		self.FocusBarT:close()
		self.FocusBarB:close()
		self.bg:close()
		self.ImageText:close()
	end )
	if PostLoadFunc then
		PostLoadFunc( self, controller, menu )
	end
	return self
end

